BOOTSTRAP: docker
FROM: nvidia/cuda:12.6.0-base-ubuntu22.04
Stage: spython-base

# ADAPTED FROM: https://gist.github.com/aozalevsky/f4704d2a07040ab6852fbeaf46726832

%files

%post
################################# APT INSTALL #################################
export DEBIAN_FRONTEND=noninteractive
mkdir -p /tmp/apt/cache
mkdir -p /tmp/apt/lists
echo 'Dir::Cache "/tmp/apt/cache";' > /etc/apt/apt.conf.d/99custom
echo 'Dir::State::Lists "/tmp/apt/lists";' >> /etc/apt/apt.conf.d/99custom

apt-get update
apt-get install -y software-properties-common \
                   git wget

# Get apt repository of specific Python versions. Then install Python. Tell APT
# this isn t an interactive TTY to avoid timezone prompt when installing.
add-apt-repository ppa:deadsnakes/ppa
apt install -y python3.11 python3-pip python3.11-venv python3.11-dev
python3.11 -m venv /alphafold3_venv
###############################################################################

PATH="/hmmer/bin:/alphafold3_venv/bin:$PATH"
# Install HMMER. Do so before copying the source code, so that docker can cache
# the image layer containing HMMER.
cd /opt
mkdir /hmmer_build /hmmer
wget http://eddylab.org/software/hmmer/hmmer-3.4.tar.gz --directory-prefix /hmmer_build
cd /hmmer_build && tar zxf hmmer-3.4.tar.gz && rm hmmer-3.4.tar.gz
cd /hmmer_build/hmmer-3.4 && ./configure --prefix /hmmer
cd /hmmer_build/hmmer-3.4 && make -j8
cd /hmmer_build/hmmer-3.4 && make install
cd /hmmer_build/hmmer-3.4/easel && make install
rm -R /hmmer_build


# Copy the AlphaFold 3 source code from the local machine to the container and
# set the working directory to there.
mkdir -p /app/alphafold
cd /app/alphafold
git clone https://github.com/google-deepmind/alphafold3
cd alphafold3
mkdir -p /tmp/pip/cache
pip3 --cache-dir=/tmp/pip/cache install -r dev-requirements.txt
pip3 --cache-dir=/tmp/pip/cache install --no-deps .
# Build chemical components database (this binary was installed by pip).
build_data

# To work around a known XLA issue causing the compilation time to greatly
# increase, the following environment variable setting XLA flags must be enabled
# when running AlphaFold 3:
XLA_FLAGS="--xla_gpu_enable_triton_gemm=false"
# Memory settings used for folding up to 5,120 tokens on A100 80 GB.
XLA_PYTHON_CLIENT_PREALLOCATE=true
XLA_CLIENT_MEM_FRACTION=0.95

%environment
export PATH="/hmmer/bin:/alphafold3_venv/bin:$PATH"
export XLA_FLAGS="--xla_gpu_enable_triton_gemm=false"
export XLA_PYTHON_CLIENT_PREALLOCATE=true
export XLA_CLIENT_MEM_FRACTION=0.95
%runscript
python3 /app/alphafold/alphafold3/run_alphafold.py "$@"
%startscript
python3 /app/alphafold/alphafold3/run_alphafold.py "$@"
