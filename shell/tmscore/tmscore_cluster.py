#!/usr/bin/env python3
# -*- coding: UTF8 -*-

#############################################################################
# Author: Guillaume Bouvier -- guillaume.bouvier@pasteur.fr                 #
# https://research.pasteur.fr/en/member/guillaume-bouvier/                  #
# Copyright (c) 2021 Institut Pasteur                                       #
#                 				                            #
#                                                                           #
#  Redistribution and use in source and binary forms, with or without       #
#  modification, are permitted provided that the following conditions       #
#  are met:                                                                 #
#                                                                           #
#  1. Redistributions of source code must retain the above copyright        #
#  notice, this list of conditions and the following disclaimer.            #
#  2. Redistributions in binary form must reproduce the above copyright     #
#  notice, this list of conditions and the following disclaimer in the      #
#  documentation and/or other materials provided with the distribution.     #
#  3. Neither the name of the copyright holder nor the names of its         #
#  contributors may be used to endorse or promote products derived from     #
#  this software without specific prior written permission.                 #
#                                                                           #
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS      #
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT        #
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR    #
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT     #
#  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   #
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT         #
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,    #
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY    #
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT      #
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE    #
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.     #
#                                                                           #
#  This program is free software: you can redistribute it and/or modify     #
#                                                                           #
#############################################################################

import sys
import os
import pandas as pd
import numpy as np
from sklearn.cluster import AgglomerativeClustering
script_dir = os.path.dirname(os.path.realpath(__file__))
sys.path.append(f'{script_dir}/../../python')
import recutils


def get_intra_cluster_mean(rec, cid):
    out = rec.values[clustering.labels_ == cid, :][:, clustering.labels_ == cid].mean()
    return out

if __name__ == '__main__':
    import argparse
    # argparse.ArgumentParser(prog=None, usage=None, description=None, epilog=None, parents=[], formatter_class=argparse.HelpFormatter, prefix_chars='-', fromfile_prefix_chars=None, argument_default=None, conflict_handler='error', add_help=True, allow_abbrev=True, exit_on_error=True)
    parser = argparse.ArgumentParser(description='')
    # parser.add_argument(name or flags...[, action][, nargs][, const][, default][, type][, choices][, required][, help][, metavar][, dest])
    parser.add_argument('-r', '--rec', help='recfile as generated by tmscore-multi.sh', required=True)
    parser.add_argument('--rmsd', help='cluster by rmsd', action='store_true')
    parser.add_argument('--threshold', help='distance threshold to use', type=float, required=True)
    args = parser.parse_args()

    rec = recutils.load(args.rec)
    rec = pd.DataFrame(rec)
    if args.rmsd:
        rec = rec[['model', 'native', 'rmsd']]
        rec = rec.pivot('model', 'native', 'rmsd')
    else:
        rec = rec[['model', 'native', 'tmscore']]
        rec = 1. - rec.pivot('model', 'native', 'tmscore')
    clustering = AgglomerativeClustering(affinity='precomputed', linkage='average', distance_threshold=args.threshold, n_clusters=None)
    clustering.fit(rec)
    labels, counts = np.unique(clustering.labels_, return_counts=True)
    nclusters = len(labels)
    print(f'number_of_clusters: {nclusters}')
    print()
    distance_intra_clusters = []
    for cid, pop in zip(labels, counts):
        print(f'label: {cid}')
        print(f'population: {pop}')
        distance_intra = get_intra_cluster_mean(rec, cid)
        distance_intra_clusters.append(distance_intra)
        print(f'distance_intra: {distance_intra}')
        print()

    for cid in labels:
        outstr = []
        data_labels = rec.columns[clustering.labels_ == cid]
        distances_pt = []
        for pt in data_labels:
            distance_pt = rec[rec.columns == pt].values.squeeze()[clustering.labels_ == cid].mean()
            distances_pt.append(distance_pt)
            outstr.append([f'model: {pt}', f'cluster: {cid}', f'distance_mean: {distance_pt}', 'centroid: 0', ''])
        centroid_ind = np.argmin(distances_pt)
        outstr[centroid_ind][3] = 'centroid: 1'
        for strings in outstr:
            for string in strings:
                print(string)
